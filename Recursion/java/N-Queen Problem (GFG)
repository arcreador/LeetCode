//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
import java.lang.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0) {
            int n = Integer.parseInt(in.readLine());
            
            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);
            if(ans.size() == 0)
                System.out.println("-1");
            else {
                for(int i = 0;i < ans.size();i++){
                    System.out.print("[");
                    for(int j = 0;j < ans.get(i).size();j++)
                        System.out.print(ans.get(i).get(j) + " ");
                    System.out.print("] ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution{
    
    
    static boolean isSafe(int n,int[][] arr,int r,int c){
        
        for(int i=0; i < r; i++){
            if(arr[i][c] == 1){
                
                return false;
            }
        }
        
        for(int i=r-1, j=c-1; i >=0 && j>=0; i--,j--){
            
            if(arr[i][j] == 1){
                
                return false;
            }
        }
        
        for(int i=r-1,j=c+1; i>=0 && j<n; i--, j++){
            
            if(arr[i][j] == 1){
                return false;
            }
        }
        
        return true;
    }
    
    
    static ArrayList<ArrayList<Integer>> helper(int n,int[][] arr,int r,ArrayList<ArrayList<Integer>> ans){
        
        if(r == n){
            
            ArrayList<Integer> temp = new ArrayList<Integer>();
            
            for(int i=0; i<n; i++){
                for(int j=0; j<n; j++){
                    if(arr[i][j] == 1){
                        
                        temp.add(j+1);
                        
                    }
                    
                }
            }
            ans.add(temp);
        }
        
        for(int i = 0; i<n; i++){
            if(isSafe(n,arr,r,i)){
                
                arr[r][i] = 1;
                helper(n,arr,r+1,ans);
                arr[r][i] =0;
                
            }
        }
        return ans;
    }
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        int[][] arr = new int[n][n];
        return helper(n,arr,0,ans);
       
        
        
    }
}
